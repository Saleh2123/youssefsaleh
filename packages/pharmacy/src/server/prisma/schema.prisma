generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("_TOPP_PHARMACY_DB_URL")
}

//------------------------------------------------------------------------------
model Profile {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    username String @unique
    email    String @unique

    mode     Int
    password String

    patient    Patient?
    pharmacist Pharmacist?

    otp Otp?
}

model Pharmacist {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    profileId String  @unique @db.ObjectId
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    files File[]
}

model Patient {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    addresses String[]
    cart      CartProduct[]
    orders    Order[]

    wallet Int @default(0)

    profileId String  @unique @db.ObjectId
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

//------------------------------------------------------------------------------
model Otp {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    value String

    username String  @unique
    profile  Profile @relation(fields: [username], references: [username], onDelete: Cascade)
}

//------------------------------------------------------------------------------
model PendingPharmacist {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    username String @unique
    email    String @unique

    password String
}

//------------------------------------------------------------------------------
model Product {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name  String
    price Float

    quantity Int @default(0)
    sales    Int @default(0)

    cartProduct  CartProduct[]
    orderProduct OrderProduct[]

    imageId String? @db.ObjectId
    image   File?   @relation(fields: [imageId], references: [id])
}

//------------------------------------------------------------------------------
model CartProduct {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    quantity Int @default(1)

    productId String  @unique @db.ObjectId
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    patientId String  @db.ObjectId
    patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

enum OrderMethod {
    Cash
    Stripe
    Wallet
}

enum OrderStatus {
    Complete
    Pending
}

model OrderProduct {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    quantity Int

    orderId String @unique @db.ObjectId
    order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

    productId String  @unique @db.ObjectId
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    address String
    method  OrderMethod
    total   Int

    status OrderStatus @default(Pending)

    patientId String  @db.ObjectId
    patient   Patient @relation(fields: [patientId], references: [id])

    products OrderProduct[]
}

//------------------------------------------------------------------------------
model File {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name String

    pharmacistId String?     @db.ObjectId
    pharmacist   Pharmacist? @relation(fields: [pharmacistId], references: [id], onDelete: Cascade)

    product Product[]
}
